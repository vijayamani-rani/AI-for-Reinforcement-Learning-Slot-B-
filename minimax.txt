def minimax(board, depth, is_maximizing):
    score = evaluate(board)
    if score == 10:
        return score
    if score == -10:
        return score
    if is_full(board):
        return 0

    if is_maximizing:
        best_value = -float('inf')
        for move in get_available_moves(board):
            board[move] = 'X'  # Assume 'X' is the maximizing player
            best_value = max(best_value, minimax(board, depth + 1, False))
            board[move] = ' '  # Undo move
        return best_value
    else:
        best_value = float('inf')
        for move in get_available_moves(board):
            board[move] = 'O'  # Assume 'O' is the minimizing player
            best_value = min(best_value, minimax(board, depth + 1, True))
            board[move] = ' '  # Undo move
        return best_value

def evaluate(board):
    # Check rows, columns, and diagonals for a winner
    for row in range(3):
        if board[row][0] == board[row][1] == board[row][2] != ' ':
            return 10 if board[row][0] == 'X' else -10
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != ' ':
            return 10 if board[0][col] == 'X' else -10
    if board[0][0] == board[1][1] == board[2][2] != ' ':
        return 10 if board[0][0] == 'X' else -10
    if board[0][2] == board[1][1] == board[2][0] != ' ':
        return 10 if board[0][2] == 'X' else -10
    return 0

def is_full(board):
    return all(cell != ' ' for row in board for cell in row)

def get_available_moves(board):
    return [i for i in range(9) if board[i // 3][i % 3] == ' ']

# Example usage
board = [['X', 'O', 'X'],
         [' ', 'X', 'O'],
         ['O', ' ', ' ']]
print("Minimax score:", minimax(board, 0, True))
